// Mocks generated by Mockito 5.4.5 from annotations
// in transactions_tracker/test/data/repositories/transaction_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:transactions_tracker/data/data_sources/local/transaction_local_data_source.dart'
    as _i6;
import 'package:transactions_tracker/data/data_sources/remote/transaction_remote_data_source.dart'
    as _i4;
import 'package:transactions_tracker/data/models/transaction_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransactionModel_0 extends _i1.SmartFake
    implements _i2.TransactionModel {
  _FakeTransactionModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_2 extends _i1.SmartFake
    implements _i3.AddressCheckResult {
  _FakeAddressCheckResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRemoteDataSource extends _i1.Mock
    implements _i4.TransactionRemoteDataSource {
  MockTransactionRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.TransactionModel>> getTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
        ),
        returnValue: _i5.Future<List<_i2.TransactionModel>>.value(
            <_i2.TransactionModel>[]),
      ) as _i5.Future<List<_i2.TransactionModel>>);

  @override
  _i5.Future<_i2.TransactionModel> getTransactionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.TransactionModel>.value(_FakeTransactionModel_0(
          this,
          Invocation.method(
            #getTransactionById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.TransactionModel>);
}

/// A class which mocks [TransactionLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionLocalDataSource extends _i1.Mock
    implements _i6.TransactionLocalDataSource {
  MockTransactionLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.TransactionModel>> getTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
        ),
        returnValue: _i5.Future<List<_i2.TransactionModel>>.value(
            <_i2.TransactionModel>[]),
      ) as _i5.Future<List<_i2.TransactionModel>>);

  @override
  _i5.Future<_i2.TransactionModel> getTransactionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.TransactionModel>.value(_FakeTransactionModel_0(
          this,
          Invocation.method(
            #getTransactionById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.TransactionModel>);

  @override
  _i5.Future<void> cacheTransactions(
          List<_i2.TransactionModel>? transactions) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTransactions,
          [transactions],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> cacheTransaction(_i2.TransactionModel? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTransaction,
          [transaction],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i3.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get requireAllAddressesToRespond => (super.noSuchMethod(
        Invocation.getter(#requireAllAddressesToRespond),
        returnValue: false,
      ) as bool);

  @override
  set requireAllAddressesToRespond(bool? _requireAllAddressesToRespond) =>
      super.noSuchMethod(
        Invocation.setter(
          #requireAllAddressesToRespond,
          _requireAllAddressesToRespond,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get enableToCheckForSlowConnection => (super.noSuchMethod(
        Invocation.getter(#enableToCheckForSlowConnection),
        returnValue: false,
      ) as bool);

  @override
  set enableToCheckForSlowConnection(bool? _enableToCheckForSlowConnection) =>
      super.noSuchMethod(
        Invocation.setter(
          #enableToCheckForSlowConnection,
          _enableToCheckForSlowConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get slowConnectionThreshold => (super.noSuchMethod(
        Invocation.getter(#slowConnectionThreshold),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#slowConnectionThreshold),
        ),
      ) as Duration);

  @override
  set slowConnectionThreshold(Duration? _slowConnectionThreshold) =>
      super.noSuchMethod(
        Invocation.setter(
          #slowConnectionThreshold,
          _slowConnectionThreshold,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  set checkTimeout(Duration? _checkTimeout) => super.noSuchMethod(
        Invocation.setter(
          #checkTimeout,
          _checkTimeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_1(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
        Invocation.setter(
          #checkInterval,
          _checkInterval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.AddressCheckOption> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i3.AddressCheckOption>[],
      ) as List<_i3.AddressCheckOption>);

  @override
  set addresses(List<_i3.AddressCheckOption>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<_i3.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i5.Stream<_i3.InternetConnectionStatus>.empty(),
      ) as _i5.Stream<_i3.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i5.Future<_i3.InternetConnectionStatus>.value(
            _i3.InternetConnectionStatus.connected),
      ) as _i5.Future<_i3.InternetConnectionStatus>);

  @override
  set setLastStatus(_i3.InternetConnectionStatus? status) => super.noSuchMethod(
        Invocation.setter(
          #setLastStatus,
          status,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set setRequireAllAddressesToRespond(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #setRequireAllAddressesToRespond,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<_i5.Future<_i3.AddressCheckResult>> createAddressCheckFutures(
          List<_i3.AddressCheckOption>? addresses) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAddressCheckFutures,
          [addresses],
        ),
        returnValue: <_i5.Future<_i3.AddressCheckResult>>[],
      ) as Iterable<_i5.Future<_i3.AddressCheckResult>>);

  @override
  _i5.Future<bool> checkConnectivity() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.AddressCheckResult> isHostReachable(
          _i3.AddressCheckOption? option) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [option],
        ),
        returnValue:
            _i5.Future<_i3.AddressCheckResult>.value(_FakeAddressCheckResult_2(
          this,
          Invocation.method(
            #isHostReachable,
            [option],
          ),
        )),
      ) as _i5.Future<_i3.AddressCheckResult>);

  @override
  _i5.Future<void> maybeEmitStatusUpdate({
    _i5.Timer? timer,
    Function? cancelCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeEmitStatusUpdate,
          [],
          {
            #timer: timer,
            #cancelCallback: cancelCallback,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emitStatus(_i3.InternetConnectionStatus? newStatus) =>
      super.noSuchMethod(
        Invocation.method(
          #emitStatus,
          [newStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startMonitoring() => super.noSuchMethod(
        Invocation.method(
          #startMonitoring,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelStatusUpdate() => super.noSuchMethod(
        Invocation.method(
          #cancelStatusUpdate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void configure({
    Duration? timeout,
    Duration? interval,
    List<_i3.AddressCheckOption>? addresses,
    _i3.SlowConnectionConfig? slowConnectionConfig,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #timeout: timeout,
            #interval: interval,
            #addresses: addresses,
            #slowConnectionConfig: slowConnectionConfig,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
